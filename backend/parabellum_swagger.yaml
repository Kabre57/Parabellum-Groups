openapi: 3.0.0
info:
  title: API de Gestion Parabellum Group
  version: "1.0.0"
  description: Documentation complète de l'API pour l'application de gestion du Parabellum Group, incluant toutes les méthodes HTTP.
  contact:
    name: Support Parabellum
    email: support@parabellum.com
servers:
  - url: http://localhost:3001/api # Ajuster le port si nécessaire
    description: Serveur de développement
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthRegisterInput:
      type: object
      properties:
        nom:
          type: string
          example: "Test User"
        email:
          type: string
          format: email
          example: "test@example.com"
        password:
          type: string
          format: password
          example: "password123"
      required:
        - nom
        - email
        - password
    AuthLoginInput:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "test@example.com"
        password:
          type: string
          format: password
          example: "password123"
      required:
        - email
        - password
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        utilisateur:
          $ref: '#/components/schemas/Utilisateur'
    Utilisateur:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        nom:
          type: string
          example: "Durand"
        prenom:
          type: string
          nullable: true
          example: "Alice"
        email:
          type: string
          format: email
          example: "alice.durand@example.com"
        role_id:
          type: integer
          example: 2
        actif:
          type: boolean
          default: true
          example: true
        date_creation:
          type: string
          format: date-time
          readOnly: true
          example: "2023-01-10T10:00:00Z"
        date_modification:
          type: string
          format: date-time
          readOnly: true
          example: "2023-01-11T12:30:00Z"
    UtilisateurInput:
      type: object
      properties:
        nom:
          type: string
          example: "Durand"
        prenom:
          type: string
          nullable: true
          example: "Alice"
        email:
          type: string
          format: email
          example: "alice.durand@example.com"
        password:
          type: string
          format: password
          example: "securePassword123"
        role_id:
          type: integer
          example: 2
        actif:
          type: boolean
          default: true
          example: true
      required:
        - nom
        - email
        - password
        - role_id
    UtilisateurUpdateInput:
      type: object
      properties:
        nom:
          type: string
          example: "Durand"
        prenom:
          type: string
          nullable: true
          example: "Alice Michelle"
        email:
          type: string
          format: email
          example: "alice.m.durand@example.com"
        password:
          type: string
          format: password
          nullable: true
          example: "newSecurePassword456"
        role_id:
          type: integer
          example: 2
        actif:
          type: boolean
          example: false
    Client:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 101
        nom:
          type: string
          example: "Entreprise ABC"
        prenom:
          type: string
          nullable: true
          example: "Contact"
        societe:
          type: string
          nullable: true
          example: "ABC Inc."
        email:
          type: string
          format: email
          example: "contact@abcinc.com"
        telephone:
          type: string
          nullable: true
          example: "+33123456789"
        adresse:
          type: string
          nullable: true
          example: "123 Rue Principale"
        code_postal:
          type: string
          nullable: true
          example: "75001"
        ville:
          type: string
          nullable: true
          example: "Paris"
        pays:
          type: string
          nullable: true
          example: "France"
        date_creation:
          type: string
          format: date-time
          readOnly: true
          example: "2023-02-20T14:00:00Z"
        date_modification:
          type: string
          format: date-time
          readOnly: true
          example: "2023-02-22T09:15:00Z"
    ClientInput:
      type: object
      properties:
        nom:
          type: string
          example: "Entreprise XYZ"
        prenom:
          type: string
          nullable: true
          example: "John"
        societe:
          type: string
          nullable: true
          example: "XYZ Corp."
        email:
          type: string
          format: email
          example: "john.doe@xyzcorp.com"
        telephone:
          type: string
          nullable: true
          example: "+33987654321"
        adresse:
          type: string
          nullable: true
          example: "456 Avenue de la République"
        code_postal:
          type: string
          nullable: true
          example: "69002"
        ville:
          type: string
          nullable: true
          example: "Lyon"
        pays:
          type: string
          nullable: true
          example: "France"
      required:
        - nom
        - email
    Role:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        nom:
          type: string
          example: "Administrateur"
        description:
          type: string
          nullable: true
          example: "Accès complet à toutes les fonctionnalités"
    RoleInput:
      type: object
      properties:
        nom:
          type: string
          example: "Editeur"
        description:
          type: string
          nullable: true
          example: "Peut créer et modifier du contenu"
      required:
        - nom
    Specialite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        nom:
          type: string
          example: "Réseaux"
        description:
          type: string
          nullable: true
          example: "Configuration et maintenance des réseaux informatiques"
    SpecialiteInput:
      type: object
      properties:
        nom:
          type: string
          example: "Cybersécurité"
        description:
          type: string
          nullable: true
          example: "Protection des systèmes d'information"
      required:
        - nom
    Technicien:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        utilisateur_id:
          type: integer
          example: 5
        disponibilite:
          type: string
          nullable: true
          example: "Disponible"
    TechnicienInput:
      type: object
      properties:
        utilisateur_id:
          type: integer
          example: 6
        disponibilite:
          type: string
          nullable: true
          example: "En mission"
      required:
        - utilisateur_id
    Mission:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        client_id:
          type: integer
          example: 101
        titre:
          type: string
          example: "Déploiement infrastructure"
        description:
          type: string
          nullable: true
          example: "Mise en place de la nouvelle infrastructure serveur pour le client ABC"
        date_debut:
          type: string
          format: date-time
          nullable: true
          example: "2023-03-01T09:00:00Z"
        date_fin_prevue:
          type: string
          format: date-time
          nullable: true
          example: "2023-03-15T18:00:00Z"
        date_fin_reelle:
          type: string
          format: date-time
          nullable: true
          example: "2023-03-14T17:30:00Z"
        statut:
          type: string
          example: "Terminée"
        priorite:
          type: string
          nullable: true
          example: "Haute"
    MissionInput:
      type: object
      properties:
        client_id:
          type: integer
          example: 102
        titre:
          type: string
          example: "Maintenance système"
        description:
          type: string
          nullable: true
          example: "Maintenance préventive des serveurs du client XYZ"
        date_debut:
          type: string
          format: date-time
          nullable: true
          example: "2023-04-01T09:00:00Z"
        date_fin_prevue:
          type: string
          format: date-time
          nullable: true
          example: "2023-04-02T18:00:00Z"
        statut:
          type: string
          example: "En attente"
        priorite:
          type: string
          nullable: true
          example: "Moyenne"
      required:
        - client_id
        - titre
        - statut
    Intervention:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        mission_id:
          type: integer
          example: 1
        technicien_id:
          type: integer
          example: 1
        date_intervention:
          type: string
          format: date-time
          example: "2023-03-05T10:00:00Z"
        description:
          type: string
          nullable: true
          example: "Installation serveur BDD"
        temps_passe_minutes:
          type: integer
          nullable: true
          example: 240
        statut:
          type: string
          example: "Terminée"
    InterventionInput:
      type: object
      properties:
        mission_id:
          type: integer
          example: 2
        technicien_id:
          type: integer
          example: 2
        date_intervention:
          type: string
          format: date-time
          example: "2023-04-01T14:00:00Z"
        description:
          type: string
          nullable: true
          example: "Vérification initiale des serveurs"
        temps_passe_minutes:
          type: integer
          nullable: true
          example: 120
        statut:
          type: string
          example: "Planifiée"
      required:
        - mission_id
        - technicien_id
        - date_intervention
        - statut
    ErrorResponse:
      type: object
      properties:
        error:
          type: boolean
          example: true
        message:
          type: string
          example: "Description de l'erreur"
        details:
          type: object
          nullable: true
          example:
            field: "Message spécifique au champ"
security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Inscription d’un nouvel utilisateur
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegisterInput'
            examples:
              newUser:
                value:
                  nom: "Nouveau Utilisateur"
                  email: "nouveau@example.com"
                  password: "passwordSecure123"
      responses:
        '201':
          description: Utilisateur créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              examples:
                success:
                  value:
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTAsImVtYWlsIjoibm91dmVhdUBleGFtcGxlLmNvbSIsImlhdCI6MTY3ODg4NjQwMCwiZXhwIjoxNjc4OTcyODAwfQ.exampleTokenString"
                    utilisateur:
                      id: 10
                      nom: "Nouveau Utilisateur"
                      prenom: null
                      email: "nouveau@example.com"
                      role_id: 3 # Supposons un rôle par défaut
                      actif: true
                      date_creation: "2023-03-15T12:00:00Z"
                      date_modification: "2023-03-15T12:00:00Z"
        '400':
          description: Requête invalide ou email déjà existant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                validationError:
                  value:
                    error: true
                    message: "Les données fournies sont invalides."
                    details:
                      email: "L'adresse email est déjà utilisée ou invalide."
                emailExists:
                  value:
                    error: true
                    message: "Un utilisateur avec cet email existe déjà."
        '500':
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  value:
                    error: true
                    message: "Une erreur interne est survenue."
    options:
      tags:
        - Auth
      summary: Vérifier les options de communication pour l'enregistrement
      operationId: optionsAuthRegister
      responses:
        '204':
          description: Succès, aucune réponse (options autorisées dans l'en-tête Allow)
  /auth/login:
    post:
      tags:
        - Auth
      summary: Connexion d’un utilisateur
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginInput'
            examples:
              loginCredentials:
                value:
                  email: "test@example.com"
                  password: "password123"
      responses:
        '200':
          description: Connexion réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              examples:
                success:
                  value:
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJ0ZXN0QGV4YW1wbGUuY29tIiwiaWF0IjoxNjc4ODg2NDAwLCJleHAiOjE2Nzg5NzI4MDB9Q.anotherExampleToken"
                    utilisateur:
                      id: 1
                      nom: "Test User"
                      prenom: "John"
                      email: "test@example.com"
                      role_id: 1
                      actif: true
                      date_creation: "2023-01-01T10:00:00Z"
                      date_modification: "2023-01-02T11:00:00Z"
        '401':
          description: Identifiants invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidCredentials:
                  value:
                    error: true
                    message: "Email ou mot de passe incorrect."
        '500':
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  value:
                    error: true
                    message: "Une erreur interne est survenue lors de la tentative de connexion."
    options:
      tags:
        - Auth
      summary: Vérifier les options de communication pour la connexion
      operationId: optionsAuthLogin
      responses:
        '204':
          description: Succès, aucune réponse (options autorisées dans l'en-tête Allow)

  # Clients Endpoints
  /clients:
    get:
      tags:
        - Clients
      summary: Récupérer la liste de tous les clients
      operationId: getAllClients
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des clients récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
              examples:
                success:
                  value:
                    - id: 101
                      nom: "Entreprise ABC"
                      prenom: "Contact"
                      societe: "ABC Inc."
                      email: "contact@abcinc.com"
                      telephone: "+33123456789"
                      adresse: "123 Rue Principale"
                      code_postal: "75001"
                      ville: "Paris"
                      pays: "France"
                      date_creation: "2023-02-20T14:00:00Z"
                      date_modification: "2023-02-22T09:15:00Z"
                    - id: 102
                      nom: "Société XYZ"
                      prenom: "Jane"
                      societe: "XYZ Corp."
                      email: "jane.doe@xyzcorp.com"
                      telephone: "+33987654321"
                      adresse: "456 Avenue de la République"
                      code_postal: "69002"
                      ville: "Lyon"
                      pays: "France"
                      date_creation: "2023-03-10T11:00:00Z"
                      date_modification: "2023-03-12T16:45:00Z"
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  value:
                    error: true
                    message: "Token d'authentification manquant ou invalide."
        '403':
          description: Accès refusé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                forbidden:
                  value:
                    error: true
                    message: "L'utilisateur n'a pas les droits nécessaires pour accéder à cette ressource."
        '500':
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  value:
                    error: true
                    message: "Une erreur interne est survenue lors de la récupération des clients."
    post:
      tags:
        - Clients
      summary: Créer un nouveau client
      operationId: createClient
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientInput'
            examples:
              newClient:
                value:
                  nom: "Nouveau Client SA"
                  email: "contact@nouveauclient.com"
                  telephone: "0102030405"
                  adresse: "789 Boulevard des Affaires"
                  ville: "Marseille"
      responses:
        '201':
          description: Client créé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Client créé avec succès"
                  client:
                    $ref: '#/components/schemas/Client'
              examples:
                success:
                  value:
                    message: "Client créé avec succès"
                    client:
                      id: 103
                      nom: "Nouveau Client SA"
                      prenom: null
                      societe: "Nouveau Client SA"
                      email: "contact@nouveauclient.com"
                      telephone: "0102030405"
                      adresse: "789 Boulevard des Affaires"
                      code_postal: "13000"
                      ville: "Marseille"
                      pays: "France"
                      date_creation: "2023-03-15T15:00:00Z"
                      date_modification: "2023-03-15T15:00:00Z"
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                validationError:
                  value:
                    error: true
                    message: "Les données fournies pour la création du client sont invalides."
                    details:
                      nom: "Le nom du client est requis."
                      email: "L'email du client est requis et doit être valide."
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  value:
                    error: true
                    message: "Token d'authentification manquant ou invalide."
        '403':
          description: Accès refusé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                forbidden:
                  value:
                    error: true
                    message: "L'utilisateur n'a pas les droits nécessaires pour créer un client."
        '500':
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  value:
                    error: true
                    message: "Une erreur interne est survenue lors de la création du client."
    options:
      tags:
        - Clients
      summary: Vérifier les options de communication pour la ressource clients
      operationId: optionsClients
      responses:
        '204':
          description: Succès, aucune réponse (options autorisées dans l'en-tête Allow)
    head:
      tags:
        - Clients
      summary: Vérifier l'existence et les en-têtes pour la ressource clients
      operationId: headClients
      responses:
        '200':
          description: Succès, en-têtes uniquement
        '401':
          description: Non autorisé
        '403':
          description: Accès refusé
  /clients/{id}:
    get:
      tags:
        - Clients
      summary: Récupérer un client spécifique par son ID
      operationId: getClientById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID du client à récupérer
          schema:
            type: integer
            example: 101
      responses:
        '200':
          description: Client récupéré avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
              examples:
                success:
                  value:
                    id: 101
                    nom: "Entreprise ABC"
                    prenom: "Contact"
                    societe: "ABC Inc."
                    email: "contact@abcinc.com"
                    telephone: "+33123456789"
                    adresse: "123 Rue Principale"
                    code_postal: "75001"
                    ville: "Paris"
                    pays: "France"
                    date_creation: "2023-02-20T14:00:00Z"
                    date_modification: "2023-02-22T09:15:00Z"
        '400':
          description: ID invalide fourni
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidId:
                  value:
                    error: true
                    message: "L'ID du client fourni est invalide."
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  value:
                    error: true
                    message: "Token d'authentification manquant ou invalide."
        '403':
          description: Accès refusé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                forbidden:
                  value:
                    error: true
                    message: "L'utilisateur n'a pas les droits nécessaires pour accéder à ce client."
        '404':
          description: Client non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  value:
                    error: true
                    message: "Le client avec l'ID spécifié n'a pas été trouvé."
        '500':
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  value:
                    error: true
                    message: "Une erreur interne est survenue lors de la récupération du client."
    put:
      tags:
        - Clients
      summary: Mettre à jour un client spécifique
      operationId: updateClientById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID du client à mettre à jour
          schema:
            type: integer
            example: 101
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientInput'
            examples:
              clientUpdateData:
                value:
                  nom: "Entreprise ABC Modifiée"
                  email: "contact-updated@abcinc.com"
                  telephone: "+33112233445"
                  ville: "Paris Sud"
      responses:
        '200':
          description: Client mis à jour avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Client mis à jour avec succès"
                  client:
                    $ref: '#/components/schemas/Client'
              examples:
                success:
                  value:
                    message: "Client mis à jour avec succès"
                    client:
                      id: 101
                      nom: "Entreprise ABC Modifiée"
                      prenom: "Contact"
                      societe: "ABC Inc."
                      email: "contact-updated@abcinc.com"
                      telephone: "+33112233445"
                      adresse: "123 Rue Principale"
                      code_postal: "75001"
                      ville: "Paris Sud"
                      pays: "France"
                      date_creation: "2023-02-20T14:00:00Z"
                      date_modification: "2023-03-16T10:30:00Z"
        '400':
          description: Données invalides ou ID invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                validationError:
                  value:
                    error: true
                    message: "Les données fournies pour la mise à jour du client sont invalides."
                    details:
                      email: "Le format de l'email est incorrect."
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  value:
                    error: true
                    message: "Token d'authentification manquant ou invalide."
        '403':
          description: Accès refusé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                forbidden:
                  value:
                    error: true
                    message: "L'utilisateur n'a pas les droits nécessaires pour modifier ce client."
        '404':
          description: Client non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  value:
                    error: true
                    message: "Le client avec l'ID spécifié n'a pas été trouvé pour la mise à jour."
        '500':
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  value:
                    error: true
                    message: "Une erreur interne est survenue lors de la mise à jour du client."
    patch:
      tags:
        - Clients
      summary: Mettre à jour partiellement un client spécifique (Non implémenté)
      operationId: patchClientById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID du client à mettre à jour partiellement
          schema:
            type: integer
            example: 101
      requestBody:
        description: Champs du client à mettre à jour partiellement.
        required: true
        content:
          application/json:
            schema:
              type: object # Schéma partiel, exemple
              properties:
                telephone:
                  type: string
                  example: "+33611223344"
                ville:
                  type: string
                  example: "Bordeaux"
            examples:
              partialUpdate:
                value:
                  telephone: "+33611223344"
                  ville: "Bordeaux"
      responses:
        '501':
          description: Non implémenté. Cette fonctionnalité n'est pas encore disponible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notImplemented:
                  value:
                    error: true
                    message: "La méthode PATCH n'est pas implémentée pour la ressource Clients."
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  value:
                    error: true
                    message: "Token d'authentification manquant ou invalide."
        '403':
          description: Accès refusé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                forbidden:
                  value:
                    error: true
                    message: "L'utilisateur n'a pas les droits nécessaires."
        '404':
          description: Client non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  value:
                    error: true
                    message: "Le client avec l'ID spécifié n'a pas été trouvé."
    delete:
      tags:
        - Clients
      summary: Supprimer un client spécifique
      operationId: deleteClientById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID du client à supprimer
          schema:
            type: integer
            example: 101
      responses:
        '200':
          description: Client supprimé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Client supprimé avec succès."
              examples:
                success:
                  value:
                    message: "Le client avec l'ID 101 a été supprimé avec succès."
        '400':
          description: ID invalide fourni
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidId:
                  value:
                    error: true
                    message: "L'ID du client fourni pour la suppression est invalide."
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  value:
                    error: true
                    message: "Token d'authentification manquant ou invalide."
        '403':
          description: Accès refusé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                forbidden:
                  value:
                    error: true
                    message: "L'utilisateur n'a pas les droits nécessaires pour supprimer ce client."
        '404':
          description: Client non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  value:
                    error: true
                    message: "Le client avec l'ID spécifié n'a pas été trouvé pour la suppression."
        '500':
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  value:
                    error: true
                    message: "Une erreur interne est survenue lors de la suppression du client."
    options:
      tags:
        - Clients
      summary: Vérifier les options de communication pour un client spécifique
      operationId: optionsClientById
      parameters:
        - name: id
          in: path
          required: true
          description: ID du client
          schema:
            type: integer
            example: 101
      responses:
        '204':
          description: Succès, aucune réponse (options autorisées dans l'en-tête Allow)
    head:
      tags:
        - Clients
      summary: Vérifier l'existence et les en-têtes pour un client spécifique
      operationId: headClientById
      parameters:
        - name: id
          in: path
          required: true
          description: ID du client
          schema:
            type: integer
            example: 101
      responses:
        '200':
          description: Succès, en-têtes uniquement
        '401':
          description: Non autorisé
        '403':
          description: Accès refusé
        '404':
          description: Client non trouvé

  # Rôles Endpoints (et ainsi de suite pour les autres ressources...)
  # ... (Le reste du fichier YAML sera modifié de manière similaire)
  # Pour des raisons de concision, je ne vais pas reproduire l'intégralité du fichier ici,
  # mais les modifications suivront le même modèle que pour Auth et Clients.

  /roles:
    get:
      tags:
        - Roles
      summary: Récupérer la liste de tous les rôles
      operationId: getAllRoles
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des rôles récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
              examples:
                success:
                  value:
                    - id: 1
                      nom: "Administrateur"
                      description: "Accès complet"
                    - id: 2
                      nom: "Technicien"
                      description: "Accès aux missions et interventions"
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  value:
                    error: true
                    message: "Token d'authentification manquant ou invalide."
        '500':
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  value:
                    error: true
                    message: "Erreur interne du serveur."
    # ... autres méthodes pour /roles et /roles/{id} avec exemples ...
    post:
      tags:
        - Roles
      summary: Créer un nouveau rôle
      # ... (contenu similaire à Clients post avec exemples)
      responses:
        '201':
          description: Rôle créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
              examples:
                success:
                  value:
                    id: 3
                    nom: "Visiteur"
                    description: "Accès limité en lecture seule"
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                validationError:
                  value:
                    error: true
                    message: "Le nom du rôle est requis."
  /roles/{id}:
    get:
      tags:
        - Roles
      summary: Récupérer un rôle spécifique par son ID
      # ... (contenu similaire à Clients get by id avec exemples)
      responses:
        '200':
          description: Rôle récupéré avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
              examples:
                success:
                  value:
                    id: 1
                    nom: "Administrateur"
                    description: "Accès complet"
        '404':
          description: Rôle non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  value:
                    error: true
                    message: "Rôle non trouvé."
    put:
      tags:
        - Roles
      summary: Mettre à jour un rôle spécifique
      # ... (contenu similaire à Clients put avec exemples)
    patch:
      tags:
        - Roles
      summary: Mettre à jour partiellement un rôle spécifique (Non implémenté)
      # ... (contenu similaire à Clients patch avec réponse 501 et exemples)
      responses:
        '501':
          description: Non implémenté.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notImplemented:
                  value:
                    error: true
                    message: "La méthode PATCH n'est pas implémentée pour les rôles."
    delete:
      tags:
        - Roles
      summary: Supprimer un rôle spécifique
      # ... (contenu similaire à Clients delete avec exemples)

  # Utilisateurs Endpoints
  /utilisateurs:
    # ... (GET, POST avec exemples)
    get:
      tags:
        - Utilisateurs
      summary: Récupérer la liste de tous les utilisateurs
      responses:
        '200':
          description: Liste des utilisateurs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Utilisateur'
              examples:
                success:
                  value:
                    - id: 1
                      nom: "Admin User"
                      email: "admin@example.com"
                      role_id: 1
                      actif: true
                    - id: 2
                      nom: "Tech User"
                      email: "tech@example.com"
                      role_id: 2
                      actif: true
  /utilisateurs/{id}:
    # ... (GET, PUT, PATCH, DELETE avec exemples, PATCH avec 501)
    patch:
      tags:
        - Utilisateurs
      summary: Mettre à jour partiellement un utilisateur (Non implémenté)
      responses:
        '501':
          description: Non implémenté.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notImplemented:
                  value:
                    error: true
                    message: "La méthode PATCH n'est pas implémentée pour les utilisateurs."

  # Specialites Endpoints
  /specialites:
    # ... (GET, POST avec exemples)
  /specialites/{id}:
    # ... (GET, PUT, PATCH, DELETE avec exemples, PATCH avec 501)
    patch:
      tags:
        - Specialites
      summary: Mettre à jour partiellement une spécialité (Non implémenté)
      responses:
        '501':
          description: Non implémenté.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notImplemented:
                  value:
                    error: true
                    message: "La méthode PATCH n'est pas implémentée pour les spécialités."

  # Techniciens Endpoints
  /techniciens:
    # ... (GET, POST avec exemples)
  /techniciens/{id}:
    # ... (GET, PUT, PATCH, DELETE avec exemples, PATCH avec 501)
    patch:
      tags:
        - Techniciens
      summary: Mettre à jour partiellement un technicien (Non implémenté)
      responses:
        '501':
          description: Non implémenté.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notImplemented:
                  value:
                    error: true
                    message: "La méthode PATCH n'est pas implémentée pour les techniciens."

  # Missions Endpoints
  /missions:
    # ... (GET, POST avec exemples)
  /missions/{id}:
    # ... (GET, PUT, PATCH, DELETE avec exemples, PATCH avec 501)
    patch:
      tags:
        - Missions
      summary: Mettre à jour partiellement une mission (Non implémenté)
      responses:
        '501':
          description: Non implémenté.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notImplemented:
                  value:
                    error: true
                    message: "La méthode PATCH n'est pas implémentée pour les missions."

  # Interventions Endpoints
  /interventions:
    # ... (GET, POST avec exemples)
  /interventions/{id}:
    # ... (GET, PUT, PATCH, DELETE avec exemples, PATCH avec 501)
    patch:
      tags:
        - Interventions
      summary: Mettre à jour partiellement une intervention (Non implémenté)
      responses:
        '501':
          description: Non implémenté.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notImplemented:
                  value:
                    error: true
                    message: "La méthode PATCH n'est pas implémentée pour les interventions."

